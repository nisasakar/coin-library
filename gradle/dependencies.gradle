
def versions = [
        // Dependencies
        core_ktx_version          : '1.10.1',
        appCompatVersion          : '1.6.1',
        materialVersion           : '1.9.0',
        constraintlayoutVersion   : '2.1.4',
        swipeRefreshlayoutVersion : '1.1.0',
        navigationVersion         : '2.7.1',
        jsoupVersion              : '1.14.3',
        okhttp3Version            : '4.10.0',
        okhttp3InterceptorVersion : '4.9.1',
        retrofitVersion           : '2.9.0',
        coroutineCoreVersion      : '1.6.4',
        lifecycleVersion          : '2.6.1',
        glideVersion              : '4.12.0',
        daggerHiltGradleVersion   : '2.44.2',
        hiltViewModelVersion      : '1.1.0-alpha01',
        roomVersion               : '2.5.2',
        lifecycleExVersion        : '2.2.0',
        firebaseVersion           : '32.2.3',
        chuckVersion              : '3.5.2',

        // Test
        espressoVersion           : '3.5.1',
        coreTestingVersion        : '1.1.1',
        coroutinesTestVersion     : '1.7.1',
        truthVersion              : '1.1.3',
        mockhitoVersion           : '3.11.2',
        mockkVersion              : '1.11.0',
        turbineVersion            : '1.0.0',
        junitVersion              : '4.13.2',
        junitExtVersion           : '1.1.5',
        jupiterVersion            : '5.8.1',

        // Gradle
        gradlePluginVersion       : '4.2.2',
        kotlinVersion             : '1.4.31',
        hiltGradleVersion         : '2.46.1'
]

ext.libraries = [
        coreKtx                   : implementation("androidx.core:core-ktx:$versions.core_ktx_version"),
        appCompat                 : implementation("androidx.appcompat:appcompat:$versions.appCompatVersion"),
        material                  : implementation("com.google.android.material:material:$versions.materialVersion"),
        constraintlayout          : implementation("androidx.constraintlayout:constraintlayout:$versions.constraintlayoutVersion"),
        swiperefreshlayout        : implementation("androidx.swiperefreshlayout:swiperefreshlayout:$versions.swipeRefreshlayoutVersion"),
        fragmentNavigationKtx     : implementation("androidx.navigation:navigation-fragment-ktx:$versions.navigationVersion"),
        uiNavigationKtx           : implementation("androidx.navigation:navigation-ui-ktx:$versions.navigationVersion"),
        jsoup                     : implementation("org.jsoup:jsoup:$versions.jsoupVersion"),
        chart                     : implementation("com.github.AAChartModel:AAChartCore-Kotlin:-SNAPSHOT"),

        okhttp3                   : [
                core              : implementation("com.squareup.okhttp3:okhttp:$versions.okhttp3Version"),
                interceptor       : implementation("com.squareup.okhttp3:logging-interceptor:$versions.okhttp3InterceptorVersion")
        ],

        retrofit                  : [
                core              : implementation("com.squareup.retrofit2:retrofit:$versions.retrofitVersion"),
                gson              : implementation("com.squareup.retrofit2:converter-gson:$versions.retrofitVersion"),

        ],

        coroutineKtx              : [
                core              : implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutineCoreVersion"),
                android           : implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutineCoreVersion"),
                viewmodel         : implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycleVersion"),
                runtime           : implementation("androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycleVersion")
        ],

        glide                     : [
                core              : implementation("com.github.bumptech.glide:glide:$versions.glideVersion"),
                compiler          : kapt("com.github.bumptech.glide:compiler:$versions.glideVersion")
        ],

        hilt                      : [
                android           : implementation("com.google.dagger:hilt-android:$versions.daggerHiltGradleVersion"),
                compiler          : kapt("com.google.dagger:hilt-android-compiler:$versions.daggerHiltGradleVersion"),
                coreCompiler      : kapt("androidx.hilt:hilt-compiler:$versions.hiltViewModelVersion")
        ],

        room                      : [
                core              : implementation("androidx.room:room-runtime:$versions.roomVersion"),
                ktx               : implementation("androidx.room:room-ktx:$versions.roomVersion"),
                compiler          : kapt("androidx.room:room-compiler:$versions.roomVersion"),
        ],

        lifecycle                 : [
                extensions        : implementation("androidx.lifecycle:lifecycle-extensions:$versions.lifecycleExVersion")
        ],

        firebase                  : [
                core              : implementation("com.google.firebase:firebase-bom:$versions.firebaseVersion"),
                analytics         : implementation("com.google.firebase:firebase-analytics-ktx"),
                auth              : implementation("com.google.firebase:firebase-auth-ktx")
        ],

        chuck                     : [
                debug             : debugImplementation("com.github.chuckerteam.chucker:library:$versions.chuckVersion"),
                release           : releaseImplementation("com.github.chuckerteam.chucker:library-no-op:$versions.chuckVersion")
        ]
]

ext.testLibraries = [
        espresso                  : androidTestImplementation ("androidx.test.espresso:espresso-core:$versions.espressoVersion"),
        coreTesting               : androidTestImplementation("androidx.arch.core:core-testing:$versions.coreTestingVersion"),
        coroutinesTest            : testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutinesTestVersion"),
        truth                     : testImplementation("com.google.truth:truth:$versions.truthVersion"),
        mockito                   : testImplementation("org.mockito:mockito-core:$versions.mockhitoVersion"),
        mockk                     : testImplementation("io.mockk:mockk:$versions.mockkVersion"),
        turbine                   : testImplementation("app.cash.turbine:turbine:$versions.turbineVersion"),

        junit                     : [
                core              : androidTestImplementation("junit:junit:$versions.junitVersion"),
                test              : androidTestImplementation("androidx.test.ext:junit:$versions.junitExtVersion"),
                jupiter           : testImplementation ("org.junit.jupiter:junit-jupiter"),
                api               : testImplementation ("org.junit.jupiter:junit-jupiter-api:$versions.jupiterVersion"),
                engine            : testRuntimeOnly ("org.junit.jupiter:junit-jupiter-engine:$versions.jupiterVersion")
        ]
]

ext.gradlePlugins = [
        android: classpath("com.android.tools.build:gradle:$versions.gradlePluginVersion"),
        kotlin : classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlinVersion"),
        hilt   : classpath("com.google.dagger:hilt-android-gradle-plugin:$versions.hiltGradleVersion")
]


ext.addDependencies = { DependencyHandler handler, dependencies ->
    getDependencies(dependencies).each {
        handler.add(it.config, it.notation)
    }
}

def repository = [
        jitpack: 'https://jitpack.io'
]


ext.addRepos = { RepositoryHandler handler ->
    handler.google()
    handler.jcenter()
    handler.maven { url repository.jitpack }
}

static def getDependencies(holder) {
    def dependencies = new ArrayList<Dependency>()

    if (holder instanceof Dependency) {
        dependencies.add(holder)
    } else if (holder instanceof Map) {
        holder.values().each {
            dependencies.addAll(getDependencies(it))
        }
    } else if (holder instanceof List) {
        holder.each {
            dependencies.addAll(getDependencies(it))
        }
    }

    return dependencies
}

static def classpath(notation) {
    new Dependency('classpath', notation)
}

static def implementation(notation) {
    new Dependency('implementation', notation)
}

static def kapt(notation) {
    new Dependency('kapt', notation)
}

static def debugImplementation(notation) {
    new Dependency('debugImplementation', notation)
}

static def releaseImplementation(notation) {
    new Dependency('releaseImplementation', notation)
}

static def testImplementation(notation) {
    new Dependency('testImplementation', notation)
}

static def testRuntimeOnly(notation) {
    new Dependency('testRuntimeOnly', notation)
}

static def androidTestImplementation(notation) {
    new Dependency('androidTestImplementation', notation)
}


class Dependency {
    def config
    def notation

    Dependency(config, notation) {
        this.config = config
        this.notation = notation
    }
}